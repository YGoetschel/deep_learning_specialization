import tensorflow as tf
import numpy as np
from tensorflow.python.framework import ops
from cnn_utils import *
import matplotlib.pyplot as plt
import tflearn.datasets.oxflower17 as oxflower17
from sklearn.model_selection import train_test_split


def create_placeholder(n_h, n_w, n_c, n_y):
    X = tf.placeholder(dtype=tf.float32, shape=[None, n_h, n_w, n_c], name='X')
    Y = tf.placeholder(dtype=tf.float32, shape=[None, n_y], name='Y')
    return X, Y


def initialize_parameters():
    # values for each kernel are: height, width, channel_prev, channels_current
    kernels_dims = [[11,11,3,96],
                   [5,5, 96, 256],
                   [3,3,256,384],
                   [3,3,384,384],
                   [3,3,384,256]]
    parameters = dict()

    for l in range(len(kernels_dims)):
        parameters['W'+str(l+1)] = tf.get_variable(name='W'+str(l+1), shape=kernels_dims[l],
                                                   initializer=tf.contrib.layers.xavier_initializer())
        parameters['b'+str(l+1)] = tf.get_variable(name='b'+str(l+1),shape=kernels_dims[l][-1],
                                                   initializer=tf.zeros_initializer())
    return parameters


def forward_prop(X, parameters):
    Z1 = tf.nn.conv2d(input=X, filters=parameters.get('W1'), strides=[1,4,4,1], padding='VALID')
    A1 = tf.nn.relu(tf.nn.bias_add(value=Z1, bias=parameters.get('b1')))
    P1 = tf.nn.max_pool(value=A1, ksize=[1, 2, 2, 1], strides=[1,2,2,1], padding='VALID')
    BN1 = tf.contrib.layers.batch_norm(P1)

    Z2 = tf.nn.conv2d(input=BN1, filters=parameters.get('W2'), strides=[1,1,1,1], padding='SAME')
    A2 = tf.nn.relu(tf.nn.bias_add(value=Z2, bias=parameters.get('b2')))
    P2 = tf.nn.max_pool(value=A2, ksize=[1,3,3,1], strides=[1,2,2,1], padding='VALID')
    BN2 = tf.contrib.layers.batch_norm(P2)

    Z3 = tf.nn.conv2d(input=BN2, filters=parameters.get('W3'), strides=[1,1,1,1], padding='SAME')
    A3 = tf.nn.relu(tf.nn.bias_add(value=Z3, bias=parameters.get('b3')))

    Z4 = tf.nn.conv2d(input=A3, filters=parameters.get('W4'), strides=[1,1,1,1], padding='SAME')
    A4 = tf.nn.relu(tf.nn.bias_add(value=Z4, bias=parameters.get('b4')))

    Z5 = tf.nn.conv2d(input=A4, filters=parameters.get('W5'), strides=[1,1,1,1], padding='SAME')
    A5 = tf.nn.relu(tf.nn.bias_add(value=Z5, bias=parameters.get('b5')))
    P5 = tf.nn.max_pool(value=A5, ksize=[1,2,2,1], strides=[1,2,2,1], padding='VALID')
    BN5 = tf.contrib.layers.batch_norm(P5)

    flattened = tf.contrib.layers.flatten(BN5)

    # Fully connected layer with 4096 nodes
    FC6 = tf.contrib.layers.fully_connected(flattened, 4096, activation_fn=None)
    var_b_6 = tf.Variable(tf.zeros(4096))  # not generated by initialize parameter fx
    A6 = tf.nn.relu(tf.nn.bias_add(value=FC6, bias=var_b_6))
    FC6_dropout = tf.nn.dropout(x=A6, keep_prob=0.4)
    BN6 = tf.contrib.layers.batch_norm(FC6_dropout)

    FC7 = tf.contrib.layers.fully_connected(BN6, 4096, activation_fn=None)
    var_b_7 = tf.Variable(tf.zeros(4096))  # not generated by initialize parameter fx
    A7 = tf.nn.relu(tf.nn.bias_add(value=FC7, bias=var_b_7))
    FC7_dropout = tf.nn.dropout(x=A7, keep_prob=0.4)
    BN7 = tf.contrib.layers.batch_norm(FC7_dropout)

    # output layer
    ZL = tf.contrib.layers.fully_connected(BN7, 17, activation_fn=None)
    return ZL


def compute_loss(ZL, Y):
    cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=Y, logits=ZL))
    return cost


def model(X_train, Y_train, X_test, Y_test, learning_rate=0.009, num_epochs=100, minibatch_size=64, print_cost=True):
    ops.reset_default_graph()               # to be able to rerun the model without overwriting tf variables
    tf.set_random_seed(1)                   # to keep results consistent (tensorflow seed)
    seed = 3                                # to keep results consistent (numpy seed)
    (m, n_H0, n_W0, n_C0) = X_train.shape
    n_y = Y_train.shape[1]
    costs = []

    X, Y = create_placeholder(n_h=n_H0, n_w=n_W0, n_c=n_C0, n_y=n_y)
    parameters = initialize_parameters()
    ZL = forward_prop(X=X, parameters=parameters)
    cost = compute_loss(ZL=ZL, Y=Y)
    optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)

    # Initialize all the variables globally
    init = tf.global_variables_initializer()
    with tf.Session() as sess:
        # Run the initialization
        sess.run(init)
        # Do the training loop
        for epoch in range(num_epochs):
            epoch_cost = 0.
            num_minibatches = m // minibatch_size  # nb of full minibatches
            seed = seed + 1
            for mini_batch_X, mini_batch_Y in random_mini_batches(X_train, Y_train, minibatch_size, seed):
                _, minibatch_cost = sess.run([optimizer, cost], {X: mini_batch_X, Y: mini_batch_Y})
                epoch_cost += minibatch_cost / num_minibatches

            # Print the cost every epoch
            if print_cost == True and epoch % 2 == 0:
                print("Cost after epoch %i: %f" % (epoch, epoch_cost))
            if print_cost == True and epoch % 1 == 0:
                costs.append(epoch_cost)

        # plot the cost
        plt.plot(np.squeeze(costs))
        plt.ylabel('cost')
        plt.xlabel('iterations (per tens)')
        plt.title("Learning rate =" + str(learning_rate))
        plt.show()

        # Calculate the correct predictions
        predict_op = tf.argmax(ZL, 1)
        correct_prediction = tf.equal(predict_op, tf.argmax(Y, 1))

        # Calculate accuracy on the test set
        accuracy = tf.reduce_mean(tf.cast(correct_prediction, "float"))
        print(accuracy)
        train_accuracy = accuracy.eval({X: X_train, Y: Y_train})
        test_accuracy = accuracy.eval({X: X_test, Y: Y_test})
        print("Train Accuracy:", train_accuracy)
        print("Test Accuracy:", test_accuracy)

        return train_accuracy, test_accuracy, parameters


def main():
    x, y = oxflower17.load_data(one_hot=True)
    print('input X shape: ',x.shape)
    print('label shape ', y.shape)

    X_train, X_test, Y_train, Y_test= train_test_split(x, y, test_size=0.2, random_state=42)

    train_accuracy, test_accuracy, parameters = model(X_train, Y_train, X_test, Y_test, num_epochs=10)

if __name__=='__main__':
    main()